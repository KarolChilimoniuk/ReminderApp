{"version":3,"sources":["components/TasksList/TaskList.module.css","components/Modals/NewTaskModal/NewTaskModal.module.css","components/Navigation/Navigation.module.css","components/Burger/Burger.module.css","images/icons/delete.svg","components/Footer/Footer.module.css","images/icons/check.svg","images/icons/undone.svg","views/HomeView/HomeView.module.css","images/icons/add.svg","components/AddTask/AddTask.module.css","images/icons/error.svg","views/DoneView/DoneView.module.css","views/UndoneView/UndoneView.module.css","components/Navigation/Navigation.js","components/TasksList/TasksList.js","views/HomeView/HomeView.js","components/AddTask/AddTask.js","models/taskModel.js","components/Modals/NewTaskModal/NewTaskModal.js","components/Burger/Burger.js","views/DoneView/DoneView.js","views/UndoneView/UndoneView.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","mobileNav","className","styles","navigation","activeMobile","list","list_element","to","list_link","TasksList","tasksToShow","tasksType","useState","JSON","parse","localStorage","getItem","userTasks","updateTasksList","removeTask","id","a","tasks","length","filter","task","setItem","stringify","setStatus","find","taskToFind","done","map","el","console","log","sort","b","Date","term","taskToShow","list_element_done","key","list_paragraph","span","name","list_element_image","src","removeIcon","alt","onClick","doneRect","emptyRect","paragraph","Home","home_view","AddTask","onClickHandler","add_icon","addIcon","NewTaskModel","this","uuidv4","NewTaskModal","visible","finalDate","newTask","newTaskData","background","form_container","image","Cross","form","onSubmit","alert","form_element","label","htmlFor","input","type","onChange","e","target","value","placeholder","submit","newTasksContainer","push","Burger","mobileNavStatusHandler","burger","burgerClass","handleBurgerClass","handleBurger","activeBurger","DoneView","done_view","UndoneView","undone_view","Footer","footer","App","modalVisibility","changeModalVisibility","mobileNavStatus","handleMobileNavStatus","useEffect","prevStatus","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.592d9295.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TaskList_list__1nLSf\",\"list_element\":\"TaskList_list_element__j-pSB\",\"list_element_done\":\"TaskList_list_element_done__2VTLe\",\"list_paragraph\":\"TaskList_list_paragraph__28PFd\",\"list_element_image\":\"TaskList_list_element_image__sVaS6\",\"paragraph\":\"TaskList_paragraph__3_aXs\",\"span\":\"TaskList_span__26FiZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"NewTaskModal_background__brK4j\",\"form_container\":\"NewTaskModal_form_container__evNlW\",\"form\":\"NewTaskModal_form__3Afz_\",\"form_element\":\"NewTaskModal_form_element__2KTKy\",\"label\":\"NewTaskModal_label__RwEWG\",\"image\":\"NewTaskModal_image__gNyiB\",\"input\":\"NewTaskModal_input__1llH4\",\"submit\":\"NewTaskModal_submit__3cmLt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__nay2d\",\"list\":\"Navigation_list__2kJba\",\"list_link\":\"Navigation_list_link__2iMAl\",\"activeMobile\":\"Navigation_activeMobile__39dBj\",\"list_element\":\"Navigation_list_element__1F9WL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"burger\":\"Burger_burger__8Sw5v\",\"activeBurger\":\"Burger_activeBurger__1rpwg\"};","module.exports = __webpack_public_path__ + \"static/media/delete.665926e2.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3nzwE\",\"paragraph\":\"Footer_paragraph__v0WLy\"};","module.exports = __webpack_public_path__ + \"static/media/check.0c141b91.svg\";","module.exports = __webpack_public_path__ + \"static/media/undone.68635bea.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home_view\":\"HomeView_home_view__UQBPB\"};","module.exports = __webpack_public_path__ + \"static/media/add.f93faf49.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_icon\":\"AddTask_add_icon__2TI1T\"};","module.exports = __webpack_public_path__ + \"static/media/error.49cbfff0.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"done_view\":\"DoneView_done_view__1lniM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"undone_view\":\"UndoneView_undone_view__3ZT7B\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./Navigation.module.css\";\r\n\r\nconst Navigation = ({ mobileNav }) => {\r\n  return (\r\n    <nav\r\n      className={\r\n        mobileNav === \"default\" ? styles.navigation : styles.activeMobile\r\n      }\r\n    >\r\n      <ul className={styles.list}>\r\n        <li className={styles.list_element}>\r\n          <Link to=\"/\" className={styles.list_link}>\r\n            Home\r\n          </Link>\r\n        </li>\r\n        <li className={styles.list_element}>\r\n          <Link to=\"/done\" className={styles.list_link}>\r\n            Done\r\n          </Link>\r\n        </li>\r\n        <li className={styles.list_element}>\r\n          <Link to=\"/undone\" className={styles.list_link}>\r\n            Undone\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  mobileNav: PropTypes.string,\r\n};\r\nexport default Navigation;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport removeIcon from \"../../images/icons/delete.svg\";\r\nimport doneRect from \"../../images/icons/check.svg\";\r\nimport emptyRect from \"../../images/icons/undone.svg\";\r\nimport styles from \"./TaskList.module.css\";\r\n\r\nconst TasksList = ({ tasksType }) => {\r\n  const [userTasks, updateTasksList] = useState(\r\n    JSON.parse(localStorage.getItem(\"tasks\"))\r\n  );\r\n\r\n  let tasksToShow;\r\n\r\n  const removeTask = async (id) => {\r\n    let tasks = [...userTasks];\r\n    if (tasks.length - 1 < 1) {\r\n      tasks = [];\r\n    } else {\r\n      tasks = tasks.filter((task) => task.id !== id);\r\n    }\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    updateTasksList(() => tasks);\r\n  };\r\n\r\n  const setStatus = (id) => {\r\n    let tasks = [...userTasks];\r\n    const task = tasks.find((taskToFind) => taskToFind.id === id);\r\n    task.done = !task.done;\r\n    tasks = tasks.map((el) => (el.id === task.id ? task : el));\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    updateTasksList(tasks);\r\n    console.log(userTasks, id);\r\n  };\r\n\r\n  if (userTasks !== null && userTasks.length !== 0) {\r\n    if (tasksType !== \"all\") {\r\n      tasksType === \"done\"\r\n        ? (tasksToShow = userTasks\r\n            .filter((task) => task.done === true)\r\n            .sort((a, b) => {\r\n              return new Date(a.term) - new Date(b.term);\r\n            })\r\n            .map((taskToShow) => (\r\n              <li className={styles.list_element_done} key={taskToShow.id}>\r\n                <h3 className={styles.list_paragraph}>\r\n                  Zadanie:{\" \"}\r\n                  <span className={styles.span}>{taskToShow.name}</span>\r\n                </h3>\r\n                <h3 className={styles.list_paragraph}>\r\n                  Termin: <span className={styles.span}>{taskToShow.term}</span>\r\n                </h3>\r\n                <img\r\n                  className={styles.list_element_image}\r\n                  src={removeIcon}\r\n                  alt=\"remove task\"\r\n                  onClick={() => removeTask(taskToShow.id)}\r\n                />\r\n                <img\r\n                  className={styles.list_element_image}\r\n                  src={doneRect}\r\n                  alt=\"done task\"\r\n                  onClick={() => setStatus(taskToShow.id)}\r\n                />\r\n              </li>\r\n            )))\r\n        : (tasksToShow = userTasks\r\n            .filter((task) => task.done === false)\r\n            .sort((a, b) => {\r\n              return new Date(a.term) - new Date(b.term);\r\n            })\r\n            .map((taskToShow) => (\r\n              <li className={styles.list_element} key={taskToShow.id}>\r\n                <h3 className={styles.list_paragraph}>\r\n                  Zadanie:{\" \"}\r\n                  <span className={styles.span}>{taskToShow.name}</span>\r\n                </h3>\r\n                <h3 className={styles.list_paragraph}>\r\n                  Termin: <span className={styles.span}>{taskToShow.term}</span>\r\n                </h3>\r\n                <img\r\n                  className={styles.list_element_image}\r\n                  src={removeIcon}\r\n                  alt=\"remove task\"\r\n                  onClick={() => removeTask(taskToShow.id)}\r\n                />\r\n                <img\r\n                  className={styles.list_element_image}\r\n                  src={emptyRect}\r\n                  alt=\"not done\"\r\n                  onClick={() => setStatus(taskToShow.id)}\r\n                />\r\n              </li>\r\n            )));\r\n    } else if (tasksType === \"all\") {\r\n      tasksToShow = userTasks\r\n        .sort((a, b) => {\r\n          return new Date(a.term) - new Date(b.term);\r\n        })\r\n        .map((taskToShow) =>\r\n          taskToShow.done === true ? (\r\n            <li className={styles.list_element_done} key={taskToShow.id}>\r\n              <h3 className={styles.list_paragraph}>\r\n                Zadanie: <span className={styles.span}>{taskToShow.name}</span>\r\n              </h3>\r\n              <h3 className={styles.list_paragraph}>\r\n                Termin: <span className={styles.span}>{taskToShow.term}</span>\r\n              </h3>\r\n              <img\r\n                className={styles.list_element_image}\r\n                src={removeIcon}\r\n                alt=\"remove task\"\r\n                onClick={() => removeTask(taskToShow.id)}\r\n              />\r\n              <img\r\n                className={styles.list_element_image}\r\n                src={doneRect}\r\n                alt=\"done task\"\r\n                onClick={() => setStatus(taskToShow.id)}\r\n              />\r\n            </li>\r\n          ) : (\r\n            <li className={styles.list_element} key={taskToShow.id}>\r\n              <h3 className={styles.list_paragraph}>\r\n                Zadanie: <span className={styles.span}>{taskToShow.name}</span>\r\n              </h3>\r\n              <h3 className={styles.list_paragraph}>\r\n                Termin: <span className={styles.span}>{taskToShow.term}</span>\r\n              </h3>\r\n              <img\r\n                className={styles.list_element_image}\r\n                src={removeIcon}\r\n                alt=\"remove task\"\r\n                onClick={() => removeTask(taskToShow.id)}\r\n              />\r\n              <img\r\n                className={styles.list_element_image}\r\n                src={emptyRect}\r\n                alt=\"not done\"\r\n                onClick={() => setStatus(taskToShow.id)}\r\n              />\r\n            </li>\r\n          )\r\n        );\r\n    }\r\n  } else {\r\n    tasksToShow = null;\r\n  }\r\n\r\n  if (tasksToShow !== null) {\r\n    return <ul className={styles.list}>{tasksToShow}</ul>;\r\n  } else {\r\n    return <h3 className={styles.paragraph}>Brak zadań</h3>;\r\n  }\r\n};\r\n\r\nTasksList.propTypes = {\r\n  tasksType: PropTypes.string,\r\n};\r\nexport default TasksList;\r\n","import React from \"react\";\r\nimport TasksList from \"../../components/TasksList/TasksList\";\r\nimport styles from \"./HomeView.module.css\";\r\n\r\nexport const Home = () => {\r\n  return (\r\n    <div className={styles.home_view}>\r\n      <TasksList tasksType={\"all\"} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport addIcon from \"../../images/icons/add.svg\";\r\nimport styles from \"./AddTask.module.css\";\r\n\r\nconst AddTask = ({ onClickHandler }) => {\r\n  return (\r\n    <>\r\n      <img\r\n        className={styles.add_icon}\r\n        src={addIcon}\r\n        alt=\"plus\"\r\n        onClick={onClickHandler}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nAddTask.propTypes = {\r\n  onClickHandler: PropTypes.func,\r\n};\r\n\r\nexport default AddTask;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass NewTaskModel {\r\n  constructor(name, term) {\r\n    this.id = uuidv4();\r\n    this.name = name;\r\n    this.done = false;\r\n    this.term = term;\r\n  }\r\n}\r\n\r\nexport default NewTaskModel;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport NewTaskModel from \"../../../models/taskModel\";\r\nimport Cross from \"../../../images/icons/error.svg\";\r\nimport styles from \"./NewTaskModal.module.css\";\r\n\r\nconst NewTaskModal = ({ visible, onClickHandler }) => {\r\n  const [tasks, updateTasksList] = useState(JSON.parse(localStorage.getItem(\"tasks\")));\r\n\r\n  let [newTask, newTaskData] = useState({\r\n    name: \"\",\r\n    finalDate: \"\",\r\n  });\r\n\r\n  const nameHandler = (e) => {\r\n    newTaskData({\r\n      name: e.target.value,\r\n      finalDate: newTask.finalDate,\r\n    });\r\n  };\r\n\r\n  const finalDateHandler = (e) => {\r\n    newTaskData({\r\n      name: newTask.name,\r\n      finalDate: e.target.value,\r\n    });\r\n  };\r\n\r\n  const saveNewTask = () => {\r\n    const newTasksContainer = JSON.parse(localStorage.getItem(\"tasks\"));\r\n    newTasksContainer.push(new NewTaskModel(newTask.name, newTask.finalDate));\r\n    localStorage.setItem(\"tasks\", JSON.stringify(newTasksContainer));\r\n    updateTasksList(() => tasks);\r\n  };\r\n\r\n  return visible ? (\r\n    <div className={styles.background}>\r\n      <div className={styles.form_container}>\r\n        <img\r\n          className={styles.image}\r\n          src={Cross}\r\n          alt=\"close\"\r\n          onClick={onClickHandler}\r\n        />\r\n        <form\r\n          className={styles.form}\r\n          onSubmit={() => {\r\n            alert(\r\n              `Dodałeś nowe zadanie: ${newTask.name}, \\nTermin: ${newTask.finalDate}`\r\n            );\r\n          }}\r\n        >\r\n          <div className={styles.form_element}>\r\n            <label className={styles.label} htmlFor=\"taskName\">\r\n              Nazwa zadania\r\n            </label>\r\n            <input\r\n              className={styles.input}\r\n              type=\"text\"\r\n              id=\"taskName\"\r\n              onChange={nameHandler}\r\n              placeholder=\"Zadanie\"\r\n            />\r\n          </div>\r\n          <div className={styles.form_element}>\r\n            <label className={styles.label} htmlFor=\"taskDate\">\r\n              Termin\r\n            </label>\r\n            <input\r\n              className={styles.input}\r\n              type=\"date\"\r\n              id=\"taskDate\"\r\n              onChange={finalDateHandler}\r\n            />\r\n          </div>\r\n          <input\r\n            className={styles.submit}\r\n            type=\"submit\"\r\n            value=\"Dodaj zadanie\"\r\n            onClick={saveNewTask}\r\n          />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nNewTaskModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  onClickHandler: PropTypes.func,\r\n};\r\n\r\nexport default NewTaskModal;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Burger.module.css\";\r\n\r\nconst Burger = ({ mobileNavStatusHandler }) => {\r\n  let [burgerClass, handleBurgerClass] = useState(styles.burger);\r\n\r\n  const handleBurger = () => {\r\n    handleBurgerClass(\r\n      burgerClass === styles.burger\r\n        ? (burgerClass = styles.activeBurger)\r\n        : (burgerClass = styles.burger)\r\n    );\r\n  };\r\n  if (burgerClass === styles.burger) {\r\n    return (\r\n      <div\r\n        className={styles.burger}\r\n        onClick={() => {\r\n          handleBurger();\r\n          mobileNavStatusHandler();\r\n        }}\r\n      ></div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div\r\n        className={styles.activeBurger}\r\n        onClick={() => {\r\n          handleBurger();\r\n          mobileNavStatusHandler();\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n};\r\n\r\nBurger.propTypes = {\r\n  mobileNavStatusHandler: PropTypes.func,\r\n};\r\n\r\nexport default Burger;\r\n","import React from \"react\";\r\nimport TasksList from \"../../components/TasksList/TasksList\";\r\nimport styles from \"./DoneView.module.css\";\r\n\r\nexport const DoneView = () => {\r\n  return (\r\n    <div className={styles.done_view}>\r\n      <TasksList tasksType={\"done\"} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport TasksList from \"../../components/TasksList/TasksList\";\r\nimport styles from \"./UndoneView.module.css\";\r\n\r\nexport const UndoneView = () => {\r\n  return (\r\n    <div className={styles.undone_view}>\r\n      <TasksList tasksType={\"undone\"} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./Footer.module.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className={styles.footer}>\r\n      <p className={styles.paragraph}>By Karol Chilimoniuk</p>\r\n      <p className={styles.paragraph}>webdevkarolchilimoniuk@gmail.com</p>\r\n      <p className={styles.paragraph}>2020</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Nav from \"./components/Navigation/Navigation\";\r\nimport { Home } from \"./views/HomeView/HomeView\";\r\nimport AddIcon from \"./components/AddTask/AddTask\";\r\nimport NewTaskModal from \"./components/Modals/NewTaskModal/NewTaskModal\";\r\nimport Burger from \"./components/Burger/Burger\";\r\nimport { DoneView as Done } from \"./views/DoneView/DoneView\";\r\nimport { UndoneView as Undone } from \"./views/UndoneView/UndoneView\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nfunction App() {\r\n  const [modalVisibility, changeModalVisibility] = useState(false);\r\n  const [mobileNavStatus, handleMobileNavStatus] = useState(\"default\");\r\n\r\n  useEffect(() => {\r\n    if (JSON.parse(localStorage.getItem(\"tasks\")) === null) {\r\n      localStorage.setItem(\"tasks\", JSON.stringify([]));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <div className=\"App\">\r\n          <header className=\"header\">\r\n            <Burger\r\n              mobileNavStatusHandler={() =>\r\n                handleMobileNavStatus((prevStatus) =>\r\n                  mobileNavStatus === \"default\" ? \"active\" : \"default\"\r\n                )\r\n              }\r\n            />\r\n            <Nav mobileNav={mobileNavStatus} />\r\n          </header>\r\n          <Route exact path=\"/\" render={() => <Home />} />\r\n          <Route path=\"/done\" render={() => <Done />} />\r\n          <Route path=\"/undone\" render={() => <Undone />} />\r\n          <AddIcon\r\n            onClickHandler={() => changeModalVisibility(!modalVisibility)}\r\n          />\r\n          <NewTaskModal\r\n            visible={modalVisibility}\r\n            onClickHandler={() => changeModalVisibility(!modalVisibility)}\r\n          />\r\n          <Footer />\r\n        </div>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}